FORMAT: 1A
HOST: https://api.deepaffex.ai

# DeepAffex™ Cloud API

The NuraLogix DeepAffex™ Cloud API (DFX API) is used to analyze the facial
blood-flow information extracted from images by the
[DeepAffex™ Extraction SDK](https://www.deepaffex.ai/developers-sdk/). For an
overview of DeepAffex technologies, please refer to our
[Developers Guide](https://docs.deepaffex.ai/guide/index.html)

The API is organized into groups composed of individual endpoints e.g. General,
Users, Profiles, Measurements etc. are high-level groups of calls while
General.Status is an individual endpoint within the General group.

You may use the following documentation as a reference for interfacing with all
transport types, although REST is assumed as the primary. Note that each service
may have extra facilities available. The current API does not generally limit
access across different transports, so feel free to use the transports
interchangeably.

Note: All DeepAffex API requests are subject to *rate limiting*.

# 1. Getting Started

The following instructions will provide an overview of how to get started with
DFX API and show how take a Measurement and obtain its results.

Assuming the following prerequisites are met:
* You have a DeepAffex user account and a valid License Key
* Using one of the [DeepAffex Extraction SDKs](https://www.deepaffex.ai/developers-sdk/)
you are able to obtain an encoded payload to send as Measurement data.

Follow these steps to take a test Measurement:

1. Make a request to 
<a href="/#reference/0/organizations/register-license">Register License</a>
endpoint. You only need to do this once per active Device. The response will
contain a Device Token Pair (a device token and a one-time refresh token)- save
these securely.

2. For all subsequent API requests send the obtained device token with the request headers
<a href="/#introduction/3.5.-authentication-headers">for authentication.</a>

3. (Optional) Authenticate as a User by obtaining a user token. A *user token* has
the following two variations:
    <br><br>* *Non-measurement related user token* - This is obtained using the
    <a href="/#reference/0/organizations/login">Organizations Login</a>
    endpoint. This token doesn't contain a device ID and provides access
    to most non-measurement related endpoints, for example, study management.
    <br><br>* *Measurement related user token* - This is obtained using the
    <a href="/#reference/0/users/login">Users Login</a> endpoint. Before obtaining
    this token, it's necessary to obtain a device token first.
    This token also contains a device ID and can be used to carry out
    the measurements. It  is required to associate measurements with a particular
    user account. This token can also be used for non-measurement endpoints
    exactly the same way as the first type.

    You will receive a User Token Pair (a user token and a one-time refresh token) 
back, which will upgrade the Device Token with
your account information. This will improve measurement traceability down the
road. Replace the Device Token in Step 2 with the newly obtained User Token for
subsequent API calls.

4. <a href="/#reference/0/measurements/create">Create new Measurement,</a> save
the returned Measurement `ID` locally.

5. If you would like to receive results for each sent chunk in real time,
<a href="/#reference/0/measurements/subscribe-to-results">subscribe to results</a>
using a WebSocket connection.

6. Start TOI data extraction using the DeepAffex SDK and obtain a Payload.

7. Once you have collected enough data,
<a href="/#reference/0/measurements/add-data">send a data chunk.</a>

8. Continue sending chunks until your measurement is complete. Make sure to mark
the last chunk with `LAST::PROCESS` action.

9. <a href="/#reference/0/measurements/retrieve">Retrieve measurement results</a>
using the saved Measurement `ID`.

# 2. WebSocket Transport

The API supports access via WebSockets. This transport method is highly
optimized and provides a fast and efficient method of communicating with DFX
API. We recommend leveraging this transport for platforms that need performance
and real-time response.

In order to open a connection to the WebSocket service an `Authorization` header
must be supplied. Also during connection creation, the string `"json"` needs to
be passed as the WebSocket protocol to the server which indicates to the server
that the client's payloads will be JSON. Upon connecting, all exchanges with the
server must follow a consistent request pattern described below.

Service calls to the WebSocket service use action identifiers and request IDs.
The body of the request has to be JSON with the same structure as the request of
the corresponding REST endpoint with one difference - URL path and query
parameters (discussed below.)

In order to maintain the connection with the server, you must implement proper
ping/pong heartbeats as required by the WebSocket standard specification. Aside
from the standard use of WebSocket connectivity mechanics, the API uses a custom
request/response exchange pattern outlined below.

## 2.1 Authenticating

In order to leverage the socket API, you must establish a connection with the
server, e.g. `wss://api.deepaffex.ai` (if needed, please check with NuraLogix
for the correct URL for your geography). When making the connection a header
should be used that includes:

```
Authorization: Bearer [token]
User-Agent: [name of the device/agent]
```

If the supplied authorization details are incorrect, the connection will be
refused and the socket is dropped by the server. Upon a successful connection
the socket will open and handshakes should be complete, signalling availability
of the service.

Upon connecting to the API we recommend checking the current API version and
general status. This is done by calling the General.Status endpoint which will
respond with the appropriate status details.

## 2.2 Requesting Data

The socket API receives requests and sends them with a structured buffer.
Requests that do not abide by the proper structure are not processed and a
response body with the following structure is returned:

```
{
  Code: "INCORRECT_REQUEST"
}
```

The following identifies the structure of a WebSocket request:

```
Buffer( [ string:4 ][ string:10 ][ string/buffer ] )
```

The first 4 bytes are an Action ID for the request, which maps to the routes
table listed below.

The second 10 bytes are a unique string identifier for the request. The client
is responsible for creating it's own request patterns. This could be a counter
or a randomly generated alphanumeric string ie. `JDUEHDJEKO` or `000000001`. We
encourage using a counted request key to encourage uniqueness of the request.
This request ID is only used within the current connection and does not
interfere with other concurrent connections using the same token. Request
identifiers are not stored, so reusing them is possible however not recommended.

The remaining bytes of the payload represents the full body of your request.
Request body is similar to REST API request body documented for each endpoint.
URL path parameters must be passed via the `"Params"` key in the request
JSON and URL query parameters via the `"Query"` key. Their values should be JSON
objects whose keys are URL path / query parameter names and values are the
corresponding path / query parameter's values.

For example, for the endpoint <a href="/#reference/0/organizations/delete-user">`Delete Organization's User`</a>
(url: `/organizations/users/{ID}`):

```
{
    "Params": {
        "ID": "user_id",
    },
    "Query": {},
}
```

In this example, path parameters `ID` is specified in `Params`
and endpoint does not require body parameters.

Another example, for the endpoint <a href="/#reference/0/studies/update">`update study`</a>
(url: `/studies/{ID}`):

```
{
    "Params": {"ID": "study_id"},
    "Query": {},
    "Name": "Study Type Sample",
    "StatusID": "INACTIVE",
    "Description": "New description goes here.",
    "Config": {}
}
```

## 2.3 Receiving Data

The socket API responds to requests with the provided request identifier. The
structure of the response is as follows:

```
Buffer( [ string:10 ][ string:3 ][ string/buffer ] )
```

The first 10 bytes are the request identifier, the second 3 bytes are an HTTP
status identifier and the remaining bytes are the response body as JSON which
is similar to REST API response documented for each endpoint.

When implementing a request/response structure, the client needs to manage
requests in memory and await the servers response. The server will always
respond to a request to close it out, regardless of if there's an error or not.
See the status code table list to identify general errors. The body will also
contain relevant error information.

Note: For some streaming/results services, the API might operate slightly
differently, requiring you to subscribe to a channel/feed by touching an
endpoint/request and receiving data on the same identifier. More details are
provided in the endpoint outline. The WebSocket transport is the only method of
receiving real-time results data for measurements and other feature facilities
while REST support static calls suitable for polling processes.

# 3. Using API Transports

In order to use WebSockets in a similar manner to REST, all method calls are
prefixed by the Library (endpoint groups) followed by a period and the method
in the library. For example `PUT /users` is accessible via `Users.create`.

An important difference in the call methods is translating query string and
parameters that would typically be sent via the REST service to the WebSocket
payloads. As explained earlier in Section 2.2, please use the `"Params"` and
`"Query"` keys in the request. For example, for the `Meta.retrieveByType`
endpoint:

```
{
    "Foo": "bar",
    "Query": {
        "Namespace": "all",
        "Fields": "Foo,Bar"
    },
    "Params": {
        "Type": "Group",
        "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d"
    }
}
```

In essence `Query` and `Params` are values that are extracted from the payload
body and interpreted as values that would typically be expected by a REST
request.

Error messages are transported in turn in similar object formats as listed
below. The WebSocket interface also follow this pattern.

# 3.1. REST Header Response Codes

| Code | Title              | Description                                                                                       |
| ---- | ------------------ | ------------------------------------------------------------------------------------------------- |
| 200  | OK                 | The request was successful (some API calls may return 201 instead).                               |
| 201  | Created            | The request was successful and a resource was created.                                            |
| 204  | No Content         | The request was successful but there is no representation to return (i.e. the response is empty). |
| 400  | Bad Request        | The request could not be understood or was missing required parameters.                           |
| 401  | Unauthorized       | Authentication failed or user doesn't have permissions for requested operation.                   |
| 403  | Forbidden          | Access denied.                                                                                    |
| 404  | Not Found          | Resource was not found.                                                                           |
| 405  | Method Not Allowed | Requested method is not supported for resource.                                                   |
| 409  | Conflict           | Errors due to some sort of conflict, e.g. Creating an user that already exists.                   |
| 429  | Too many requests  | The client has submitted more requests than allowed and was subject to rate limiting.             |

# 3.2. Allowed REST HTTP request methods

| Verb    | Description                         |
| ------- | ----------------------------------- |
| POST    | To create a resource                |
| PUT     | Update the whole body of a resource |
| PATCH   | Update parts of a resource          |
| GET     | Get a resource or list of resources |
| DELETE  | Delete a resource                   |
| CONNECT | For subscribing a socket process    |

# 3.3. Port Addresses

| Transport Type       | Port |
| -------------------- | ---- |
| REST                 | 443  |
| WebSocket + JSON     | 443  |

# 3.4. Endpoint Error Codes

All error messages sent down the wire are simple objects with one "error"
property. The value of this property could be the following:

Errors will come back with the following JSON structure. A `code` property will
always be present identifying the generalized error. The `errors` property will
return as an array of object of errors associated and mapped to the type of
error code being sent. In the validation example a breakdown of the fields and
their expected results will be returned.

```
{
    "Code": "VALIDATION",
    "Errors": {
        "FirstName": [
            [
                "STRING_GREATER_THAN",
                5
            ]
        ],
        "DateOfBirth": [
            "INVALID_RANGE"
        ]
    }
}
```

# 3.5. Authentication Headers

DFX tokens are serialized JWT tokens and are passed to the API server via the
"Authorization" header value. A basic structured request would look like this:

```Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...```

Organizations are provided with License Keys that can be exchanged for API
tokens by calling
<a href="/#reference/0/organizations/register-license">Register License</a>
endpoint.

## 3.5.1 More details and best practices

* Since tokens represent authentication information, please make sure to **store
them securely** - typically in some form of secure storage.

* Some License Keys have a limited number of allowed active Devices. If you need
to use your License on a different device, make sure to unregister your current
device first by calling the
<a href="/#reference/0/organizations/unregister-license">Organizations UnregisterLicense</a>
endpoint.


* The response to <a href="/#reference/0/organizations/register-license">Organizations RegisterLicense</a> contains a RoleID for the
license.

* Tokens may expire. To ensure that a token is valid, you can call the
<a href="/#reference/0/general/verify-token">General VerifyToken</a> endpoint.
  <br><br>* If the `ActiveLicense` field in the response is false, then your license
    is expired/decommissioned. Please use a different license or contact Nuralogix™.
  <br><br>* If the API returns an HTTP error 401 or 403, then the token is expired/invalid
    and the client must re-register the license.

* Please use the <a href="/#reference/0/auths/renew">Auths.Renew</a> endpoint to
refresh your tokens.

# 3.6. Endpoint Summary

Note that some endpoints listed in this documentation are not available in the
mapping as they may be outlined only for internal use.

| Group         | ActionID | Method  | Endpoint                                                                                                              | REST Path                                             |
| ------------- | -------- | ------- | --------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------- |
| General       | 100      | GET     | <a href="/#reference/0/general/status">`status`</a>                                                                   | /status                                               |
| General       | 101      | GET     | <a href="/#reference/0/general/mime-types">`mimeTypes`</a>                                                            | /mimes                                                |
| General       | 102      | GET     | <a href="/#reference/0/general/list-available-user-roles">`listRoles`</a>                                             | /roles                                                |
| General       | 104      | GET     | <a href="/#reference/0/general/list-available-statuses">`statuses`</a>                                                | /statuses                                             |
| General       | 107      | GET     | <a href="/#reference/0/general/verify-token">`verifyToken`</a>                                                        | /auth                                                 |
| General       | 108      | GET     | <a href="/#reference/0/general/regions">`regions`</a>                                                                 | /regions                                              |
| Users         | 200      | POST    | <a href="/#reference/0/users/create">`create`</a>                                                                     | /users                                                |
| Users         | 201      | POST    | <a href="/#reference/0/users/login">`login`</a>                                                                       | /users/auth                                           |
| Users         | 202      | GET     | <a href="/#reference/0/users/retrieve">`retrieve`</a>                                                                 | /users                                                |
| Users         | 206      | DELETE  | <a href="/#reference/0/users/remove">`remove`</a>                                                                     | /users                                                |
| Users         | 208      | PATCH   | <a href="/#reference/0/users/update">`update`</a>                                                                     | /users                                                |
| Users         | 209      | PATCH   | <a href="/#reference/0/users/send-reset-request">`sendReset`</a>                                                      | /users/sendreset                                      |
| Users         | 211      | PATCH   | <a href="/#reference/0/users/retrieve-user-role">`getRole`</a>                                                        | /users/role                                           |
| Users         | 212      | PATCH   | <a href="/#reference/0/users/verify-user-account">`verify`</a>                                                        | /users/verify                                         |
| Users         | 213      | PATCH   | <a href="/#reference/0/users/send-account-verification-code">`verificationCode`</a>                                   | /users/verificationCode/{ID}/{OrgKey}                 |
| Users         | 216      | GET     | <a href="/#reference/0/users/request-phone-login-code">`requestLoginCode`                                             | /users/auth/code/{OrgKey}/{PhoneNumber}               |
| Users         | 217      | POST    | <a href="/#reference/0/users/login-with-phone-code">`loginWithCode`</a>                                               | /users/auth/code                                      |
| Users         | 220      | POST    | <a href="/#reference/0/users/change-password">Change password</a>                                                     | /users/changepassword                                 |
| Users         | 221      | POST    | <a href="/#reference/0/users/create-two-factor-authentication-secret">Create 2FA secret logged in user</a>            | /users/mfa/secret                                     |
| Users         | 222      | POST    | <a href="/#reference/0/users/enable-two-factor-authentication-for-logged-in-user">Enable 2FA for logged in user</a>   | /users/mfa                                            |
| Users         | 223      | DELETE  | <a href="/#reference/0/users/disable-two-factor-authentication-for-logged-in-user">Disable 2FA for logged in user</a> | /users/mfa                                            |
| Users         | 224      | DELETE  | <a href="/#reference/0/users/disable-two-factor-authentication-for-specified-user">Disable 2FA for specified user</a> | /users/{ID}/mfa                                       |
| Users         | 226      | DELETE  | <a href="/#reference/0/users/logout">Logout user from all sessions at once</a>                                        | /users/auth                                           |
| Profiles      | 400      | POST    | <a href="/#reference/0/profiles/create-profile">`create`</a>                                                          | /users/profiles                                       |
| Profiles      | 401      | GET     | <a href="/#reference/0/profiles/retrieve-profile">`retrieve`</a>                                                      | /users/profiles/{ID}                                  |
| Profiles      | 402      | GET     | <a href="/#reference/0/profiles/list-profiles">`list`</a>                                                             | /users/profiles                                       |
| Profiles      | 403      | GET     | <a href="/#reference/0/profiles/list-profiles-by-user">`listByUser`</a>                                               | /users/{ID}/profiles                                  |
| Profiles      | 404      | DELETE  | <a href="/#reference/0/profiles/remove-profile">`remove`</a>                                                          | /users/profiles/{ID}                                  |
| Profiles      | 405      | PATCH   | <a href="/#reference/0/profiles/update-profile">`update`</a>                                                          | /users/profiles/{ID}                                  |
| Measurements  | 504      | POST    | <a href="/#reference/0/measurements/create">`create`</a>                                                              | /measurements                                         |
| Measurements  | 506      | POST    | <a href="/#reference/0/measurements/add-data">`data`</a>                                                              | /measurements/{ID}/data                               |
| Measurements  | 510      | CONNECT | <a href="/#reference/0/measurements/subscribe-to-results">`subscribeResults`</a>                                      | /measurements/{ID}/results/                           |
| Measurements  | 500      | GET     | <a href="/#reference/0/measurements/retrieve">`retrieve`</a>                                                          | /measurements/{ID}                                    |
| Measurements  | 501      | GET     | <a href="/#reference/0/measurements/list">`list`</a>                                                                  | /measurements                                         |
| Organizations | 700      | GET     | <a href="/#reference/0/organizations/retrieve">`retrieve`</a>                                                         | /organizations                                        |
| Organizations | 702      | GET     | <a href="/#reference/0/organizations/users">`users`</a>                                                               | /organizations/users                                  |
| Organizations | 703      | GET     | <a href="/#reference/0/organizations/list-measurements">`listMeasurements`</a>                                        | /organizations/measurements                           |
| Organizations | 704      | GET     | <a href="/#reference/0/organizations/retrieve-measurement">`retrieveMeasurement`</a>                                  | /organizations/measurements/{ID}                      |
| Organizations | 705      | POST    | <a href="/#reference/0/organizations/register-license">`registerLicense`</a>                                          | /organizations/licenses                               |
| Organizations | 706      | DELETE  | <a href="/#reference/0/organizations/unregister-license">`unregisterLicense`</a>                                      | /organizations/licenses                               |
| Organizations | 708      | GET     | <a href="/#reference/0/organizations/logo">`retrieveLogo`                                                             | /organizations/{ID}/logo                              |
| Organizations | 710      | GET     | <a href="/#reference/0/organizations/list-profiles">`listProfiles`</a>                                                | /organizations/profiles                               |
| Organizations | 711      | GET     | <a href="/#reference/0/organizations/retrieve-profile">`retrieveProfile`</a>                                          | /organizations/profiles/{ID}                          |
| Organizations | 712      | GET     | <a href="/#reference/0/organizations/retrieve-user">`retrieveUser`</a>                                                | /organizations/users/{ID}                             |
| Organizations | 713      | POST    | <a href="/#reference/0/organizations/create-user">`createUser`</a>                                                    | /organizations/users                                  |
| Organizations | 714      | PATCH   | <a href="/#reference/0/organizations/update-user">`updateUser`</a>                                                    | /organizations/users/{ID}                             |
| Organizations | 715      | DELETE  | <a href="/#reference/0/organizations/delete-user">`removeUser`</a>                                                    | /organizations/users/{ID}                             |
| Organizations | 716      | PATCH   | <a href="/#reference/0/organizations/update-profile">`updateProfile`</a>                                              | /organizations/profiles/{ID}                          |
| Organizations | 717      | POST    | <a href="/#reference/0/organizations/login">`login`</a>                                                               | /organizations/auth                                   |
| Organizations | 718      | POST    | <a href="/#reference/0/organizations/loginWithToken">`login`</a>                                                      | /organizations/auth/token                             |
| Studies       | 800      | GET     | <a href="/#reference/0/studies/types">`types`</a>                                                                     | /studies/types                                        |
| Studies       | 801      | GET     | <a href="/#reference/0/studies/list-templates">`templates`</a>                                                        | /studies/templates                                    |
| Studies       | 804      | GET     | <a href="/#reference/0/studies/retrieve">`retrieve`</a>                                                               | /studies/{ID}                                         |
| Studies       | 809      | POST    | <a href="/#reference/0/studies/retrieve-sdk-study-config-data">`retrieveSdkStudyConfigData`</a>                       | /studies/sdkconfig                                    |
| Studies       | 805      | GET     | <a href="/#reference/0/studies/list">`list`</a>                                                                       | /studies                                              |
| Studies       | 806      | POST    | <a href="/#reference/0/studies/create">`create`</a>                                                                   | /studies                                              |
| Studies       | 807      | PATCH   | <a href="/#reference/0/studies/update">`update`</a>                                                                   | /studies/{ID}                                         |
| Studies       | 808      | DELETE  | <a href="/#reference/0/studies/delete">`remove`</a>                                                                   | /studies/{ID}                                         |
| Devices       | 900      | GET     | <a href="/#reference/0/devices/types">`types`</a>                                                                     | /devices/types                                        |
| Devices       | 902      | GET     | <a href="/#reference/0/devices/retrieve">`retrieve`</a>                                                               | /devices/{ID}                                         |
| Devices       | 903      | POST    | <a href="/#reference/0/devices/create">`create`</a>                                                                   | /devices                                              |
| Devices       | 904      | PATCH   | <a href="/#reference/0/devices/update">`update`</a>                                                                   | /devices/{ID}                                         |
| Devices       | 906      | GET     | <a href="/#reference/0/devices/list">`list`</a>                                                                       | /devices                                              |
| Devices       | 908      | GET     | <a href="/#reference/0/devices/retrieve-license-id">`Retrieve license ID`</a>                                         | /devices/license                                      |
| Licenses      | 1406     | GET     | <a href="/#reference/0/licenses/get-organization-licenses">`listOrgLicenses`</a>                                      | /licenses/organization                                |
| Licenses      | 1411     | GET     | <a href="/#reference/0/licenses/get-organization-license">`retrieveOrgLicense`</a>                                    | /licenses/organization/{ID}                           |
| Auths         | 2300     | PATCH   | <a href="/#reference/0/auths/request-reset-password-link-to-users-email">`Request to send reset password link to user's email`</a>                   | /auths/users/reset                                    |
| Auths         | 2303     | POST    | <a href="/#reference/0/auths/request-login-code">`Request login code`</a>                                                    | /auths/users/code                                     |
| Auths         | 2304     | POST    | <a href="/#reference/0/auths/renew">`Renew access and refresh token pair`</a>                                         | /auths/renew                                          |
| Auths         | 2305     | POST    | <a href="/#reference/0/auths/child-token">`Get Child token without expiring input token`</a>                          | /auths/generateToken                                  |

# 4. Tokens

The DFX API is built around token authentication using JSON Web Tokens. Each
token is of variable size and comes serialized with key information pertaining
to the current access request.

All tokens are mapped against an internal policy manager that specifies what
access levels it has. The token policies control every access to the API.


## 4.1. Device Tokens

A device token usually represents a single device, such as the Anura
application. A device token provides access to endpoints that
allow for device-specific feature facilities i.e. device check-in. Obtaining a
Device token is mandatory for any Measurement related activities.

Device Token is obtained by
<a href="/#reference/0/organizations/register-license">registering license.</a>

## 4.2. User Tokens

A *user token* has the following two variations:
* *Non-measurement related user token* - This is obtained using the
<a href="/#reference/0/organizations/login">`Organizations.Login`</a>
endpoint. This token doesn't contain a device ID and provides access
to most non-measurement related endpoints, for example, study management.
* *Measurement related user token* - This is obtained using the
<a href="/#reference/0/users/login">`Users.Login`</a> endpoint.
Before obtaining this token, it's necessary to obtain a device
token first. This token contains a device ID and can be used to carry out
the measurements. It is required to associate measurements with a particular
user account. This token can also be used for non-measurement endpoints
exactly the same way as the first type.

## 4.3. One-Time Refresh Token (OTRT)

This token is only needed to be used when calling the 
<a href="/#reference/0/auths/renew">`Auths.Renew`</a> 
endpoint. When you register a license or login with the user's credentials, a pair
of tokens (a Device or User Token and a One-Time Refresh Token) is sent back. 
To bind a new IP and a new [user-agent](https://en.wikipedia.org/wiki/User_agent) to
the Device Token or the User Token (or if the User Token expires) call the
<a href="/#reference/0/auths/renew">`Auths.Renew`</a>endpoint with the OTRT.
The client needs to send the matching pair to exchange
it with a new pair. The old pair will not be valid after calling the
<a href="/#reference/0/auths/renew">`Auths.Renew`</a> endpoint. 
This is used to ensure that  devices can "roam" properly and improves
token security.


## General [/]

### Status [GET /status]

An endpoint that propagates the current API health status and other information.
This can be used during an apps initial boot process to determine the
accessibility of the API and propagate a general status message to users.
Possible `Status` codes include:

| Status Message | Description                                     |
| -------------- | ----------------------------------------------- |
| ACTIVE         | Online and fully operational                    |
| MAINTENANCE    | Offline for maintenance                         |
| ERROR          | Offline due to an error                         |
| LATENCY        | API is experience latency or a general slowdown |

Also present in the response are `Region` - the location of the API by cluster
and `AllowAnonymous` - a boolean, which when `false` means that a user login (and
thus a user token) is *required* for making measurements.

+ Response 200 (application/json)

        {
            "StatusID": "ACTIVE",
            "Version": "1.0",
            "Region": "na-east",
            "AllowAnonymous": false,
        }

### List Available Statuses [GET /statuses]

Retrieves a list of available status codes that can be used throughout the
application to update the StatusID field of various resources.

+ Request (application/json)

    + Headers

            Authorization: "Bearer <api token>"

+ Response 200 (application/json)

        [
            {
                "ID": "ACTIVE",
                "Name": "Active",
                "Description": "Active and fully operational."
            },
            {
                "ID": "INACTIVE",
                "Name": "Inactive",
                "Description": "Inactive and not available."
            },
            {
                "ID": "DELETED",
                "Name": "Deleted",
                "Description": "Deleted Removed and no longer available."
            },
            {
                "ID": "ARCHIVED",
                "Name": "Archived",
                "Description": "Archived  Archived for future use."
            },
            {
                "ID": "IN_PROGRESS",
                "Name": "In Progress",
                "Description": "In Progress or currently being process."
            },
            {
                "ID": "COMPLETE",
                "Name": "Complete",
                "Description": "Process has finished or completed."
            },
            {
                "ID": "PROCESSED",
                "Name": "Processed",
                "Description": "Record has been processed and is complete."
            },
            {
                "ID": "INVALID",
                "Name": "Invalid",
                "Description": "Record is invalid and no longer relevant."
            },
            {
                "ID": "PENDING",
                "Name": "Pending",
                "Description": "Record is in pending status."
            },
            {
                "ID": "CREATED",
                "Name": "Created",
                "Description": "Record has been created."
            },
            {
                "ID": "ERROR",
                "Name": "Error",
                "Description": "An error occurred for the record."
            },
            {
                "ID": "DECOMMISSIONED",
                "Name": "Decommissioned",
                "Description": "Resource is no longer in use."
            },
            {
                "ID": "WARNING",
                "Name": "Warning",
                "Description": "A warning happened in the server"
            },
            {
                "ID": "EXPIRED",
                "Name": "Expired",
                "Description": "Resource has passed its expiration date"
            }
        ]

### List Available User Roles [GET /roles]

Retrieves a list of available User Roles.

 + Request (application/json)

    + Headers

            Authorization: "Bearer <api token>"

+ Response 200 (application/json)

        [
            {
                "ID": "DFX_RESEARCHER",
                "Name": "DFX Researcher",
                "Description": "DFX Researcher"
            },
            {
                "ID": "NURA_APP_USER",
                "Name": "Anura Application User",
                "Description": "Users registered through Anura mobile app."
            },
            {
                "ID": "DFX_LEAD",
                "Name": "DFX Lead",
                "Description": "DeepAffex Lead Researcher"
            },
            {
                "ID": "DFX_INTERNAL_RESEARCHER",
                "Name": "DFX Internal Researcher",
                "Description": "DFX Internal Researcher"
            },
            {
                "ID": "DFX_ANALYST",
                "Name": "DFX Analyst",
                "Description": "DFX Analyst"
            },
            {
                "ID": "DFX_OPERATOR",
                "Name": "DFX Operator",
                "Description": "DFX Operator"
            },
            {
                "ID": "DFX_BASIC_USER",
                "Name": "DFX Basic User",
                "Description": "DFX Basic User"
            }            
        ]


### Mime Types [GET /mimes]

Returns a list of system-wide accepted Mime types and their IDs.

+ Response 200 (application/json)

        [
            {
                "ID": "uuid",
                "Name": "JPEG Image",
                "Mime": "image/jpeg"
            },
            {
                "ID": "uuid",
                "Name": "GIF Image",
                "Mime": "image/gif"
            },
            {
                "ID": "uuid",
                "Name": "MPEG Video",
                "Mime": "video/mpeg"
            },
            {
                "ID": "uuid",
                "Name": "QuickTime Video",
                "Mime": "video/quicktime"
            },
            {
                "ID": "uuid",
                "Name": "MatLab File",
                "Mime": "application/matlab"
            },
            {
                "ID": "uuid",
                "Name": "ExtractorCSV4 File",
                "Mime": "text/plain"
            },
            {
                "ID": "uuid",
                "Name": "PDF",
                "Mime": "application/pdf"
            }
        ]

### Verify Token [GET /auth]

An endpoint that checks the validity of your Token and returns its encoded info.

+ Request (application/json)

    + Headers

            Authorization: "Bearer <api token>"

+ Response 200 (application/json)

        {
            "OrganizationID": "d17e0fcd-e65d-45a8-af7a-6285d503f9d8",
            "ID": "42187658-c5b4-4267-afe4-3f764557578f",
            "Type": "Device",
            "DeviceID": "42187658-c5b4-4267-afe4-3f764557578f",
            "SessionGen": 0,
            "Region": "na-east",
            "exp": 1714876221,
            "iat": 1658501372,
            "iss": "urn:deepaffex",
            "RoleID": "NURA_APP_DEVICE",
            "ActiveLicense": true,
            "RemainingMeasurement": 997
        }

+ Response 401 (application/json)

        {
            "Code": "INVALID_TOKEN",
            "Message": "Token is not recognized"
        }

### Regions [GET /regions]

An endpoint gives a list of regions available for clusters.

+ Request (application/json)

+ Response 200 (application/json)

        {
            "na-east": "NA East",
            "sa-east": "SA East",
            "cn": "CN",
            "eu-central": "EU Central"
        }

## Users [/users]

### Create [POST]

Creates a new user in the organization, checking for existing user details
against the user list. `Email + Password` *OR* `PhoneNumber` fields are
required. If both are provided, `Email + Password` will be used to create User
account. By default, a user will be assigned for DFX_BASIC_USER role. The rest of the fields are optional.

+ Request (application/json)

    + Headers

            Authorization: "Bearer <api token>"

    + Body

            {
                "FirstName"   : "John",
                "LastName"    : "Appleseed",
                "Email"       : "john@example.com",
                "Password"    : "testpassword",
                "PhoneNumber" : "+12345678900",
                "Gender"      : "male",
                "DateOfBirth" : "1986-02-10",
                "HeightCm"    : "180",
                "WeightKg"    : "70"
            }

+ Response 200 (application/json)

        {
            "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d"
        }

+ Response 401 (application/json)

        {
          "Code"    : "VALIDATION",
          "Errors"  : {
            "DateOfBirth": [ "INVALID_RANGE" ]
          }
        }

+ Response 403 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }

+ Response 409 (application/json)

        {
            "Code": "USER_ALREADY_EXISTS",
            "Message": "User john2@example.com already exists in this Organization."
        }

### Login [POST /users/auth]

Logs a user into a new session using Email, Password and optionally an MFAToken
and responds with a User Token Pair (a User Token and a One-Time Refresh Token).
The User Token must be passed with every subsequent API call to the server.

**Note:** you need to obtain a Device Token Pair first to be able to login through
this endpoint.

**Note:** MFAToken token is mandatory when Multi-factor authentication is
enabled for this user.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Email": "joe@example.com",
                "Password": "foobar",
                "MFAToken": "123456"
            }

+ Response 200 (application/json)

        {
            "Token": "USER_TOKEN",
            "RefreshToken": "REFRESH_TOKEN"
        }

+ Response 401 (application/json)

        {
            "Code": "INVALID_USER"
            "Message": "Invalid Credentials"
        }

+ Response 401 (application/json)

        {
            "Code": "INVALID_PASSWORD"
            "Message": "Invalid Credentials"
        }

+ Response 401 (application/json)

        {
            "Code": "MFA_TOKEN_REQUIRED"
            "Message": "User account is configured to use multi-factor authentication."
        }

+ Response 429 (application/json)

        {
            "Code": "TOO_MANY_LOGIN_ATTEMPTS",
            "Message": ""
        }


### Request Phone Login Code [GET /users/auth/code/{OrgKey}/{PhoneNumber}]

⚠️ ***Deprecated***: Please use <a href="/#reference/0/auths/users/code/"> Auths request login code</a> instead. ⚠️

Request a 6-digit login code for a User account created with a Phone Number. Use
this code in `loginWithCode` endpoint to obtain `UserToken`.

+ Request (application/json)

+ Parameters
    + OrgKey (string) - Organization Key.
    + PhoneNumber (string) - User's phone number.

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 404 (application/json)

        {
            "Code": "INVALID_USER",
            "Message": "User not found"
        }

### Login With Phone Code [POST /users/auth/code]

Use previously requested 6-digit code to login into a new session and obtain
a `User Token Pair`.

+ Request (application/json)

        {
          "LoginCode": "123456",
          "PhoneNumber": "+12345678900",
          "OrgKey": "Organization-Key"
        }

+ Response 200 (application/json)

        {
            "Token": "USER_TOKEN",
            "RefreshToken: "REFRESH_TOKEN"
        }

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED",
            "Message": "Submitted parameters did not match our records"
        }

### Retrieve [GET]

Retrieves User account information based on the provided User Token.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "Gender": "male",
            "DateOfBirth": "1986-02-10",
            "Created": 1521491577,
            "Updated": 1530158485,
            "ID": "ef08-47a3-a424-6db41471",
            "OrganizationID": "45a8-af7a-6285d503d",
            "RoleID": "DFX_ADMIN",
            "StatusID": "ACTIVE",
            "Email": "test@nuralogix.ai",
            "Password": "$/Nl2tADWf6Tyl6G",
            "FirstName": "first",
            "LastName": "last",
            "ResetToken": null,
            "ResetTokenDate": null,
            "AvatarURI": null,
            "IsVerified": true,
            "VerificationCode": null,
            "PhoneNumber": null,
            "DeviceID": null,
            "HeightCm": null,
            "WeightKg": null,
            "LoginMethod": "Email",
            "SSOID": null,
            "Region": "na-east",
            "MFAEnabled": false
        }

+ Response 204 (application/json)

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }

### Update [PATCH /users]

Updates a user's account information with new details. This endpoint
will only update fields supplied to it, hence sending only
First Name or Last Name will exclusively update those values.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Request (application/json)

        {
            "Email": "new-email@mail.com",
            "FirstName": "John",
            "LastName": "Appleseed",
            "Gender": "male",
            "Password": "idontlikeapples",
            "DateOfBirth": "1986-02-10",
            "HeightCm": "182",
            "WeightKg": "75"
        }

+ Response 401 (application/json)

        {
            "Error": "UNAUTHORIZED_ACCESS"
        }

### Create Two-factor authentication secret [POST /users/mfa/secret]

Creates a base32 secret, url and a QR code (both derived from the secret) that are compatible
with Google Authenticator or similar two-factor token generation application. The secret can
be used to enable 2FA for given user, and QR code can be used to configure compatible application
to generate login tokens for it.

This is the first of two API calls needed to configure 2FA for a user.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "secretBase32Encoded": "***************",
            "url": "oauth://**********",
            "qrcode": "data://*******"
        }

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }

### Enable Two-factor authentication for logged in user [POST /users/mfa]

Enables 2FA for logged in user using an MFASecret (created by `/users/mfa/secret` endpoint)
and MFAToken (derived from MFASecret by scanning a QR code by Google Authenticator or compatible app).

This is the second of two API calls needed to configure 2FA for a user.

The complete workflow would be
as follows:

1. Logged in user calls `/users/mfa/enable` and stores `secretBase32Encoded` and
`qrcode` properties.

2. User scans `qrcode` by 2FA token generation app.

3. User POSTs `secretBase32Encoded` as `MFASecret` and 2FA app temporary token
as `MFAToken` to `/users/mfa/enable` endpoint.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Request (application/json)

        {
            "MFASecret": "***************",
            "MFAToken": "123456"
        }

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }

+ Response 401 (application/json)

        {
            "Code": "INCORRECT_MFATOKEN"
        }

### Disable Two-factor authentication for specified user [DELETE /users/{ID}/mfa]

Disables 2FA for user by its ID. This is a privileged operation that requires ORG_ADMIN permissions.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Parameters
    + ID: User's ID

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }

### Disable Two-factor authentication for logged in user [DELETE /users/mfa]

Disables 2FA for logged in user.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }

### Retrieve User Role [GET /users/role]

Retrieves User's Role.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "ID": "role_id",
            "Name": "role_name",
            "Description": "role_description",
            "Organization": "org. name"
        }

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }


### Send Reset Request [PATCH /users/sendreset]

⚠️ ***Deprecated***: Please use <a href="/#reference/0/auths/users/reset"> Auths send reset endpoint</a> instead. ⚠️

Dispatches a password reset request email to the user which
contains a reset password token. Upon retrieving this value the
token is used against the Reset Password endpoint.

+ Request (application/json)

        {
            "Email": "foo@bar.com",
            "Identifier": "Your organization identifier"
        }

+ Response 200 (application/json)

        {
            "ResetToken": "3aa37f61-b2b2"
        }

+ Response 401 (application/json)

        {
            "Error": "USER_NOT_FOUND"
        }

### Send Account Verification Code [GET /users/verificationCode/{ID}/{OrgKey}]

Sends an account verification code to the user's email address.
The code is used to verify the account through the account verification endpoint.

+ Parameters

    + ID: User's UUID or User's email address.
    + OrgKey: Organization key.

+ Response 200 (application/json)

        {
            "success": true,
            "Message": "We sent you a link to verify your account!"
        }

+ Response 400 (application/json)

        {
            "Code": "INVALID_USER",
            "Message": "User not found"
        }


### Verify User Account [POST /users/verify]

Verifies User's email address.

+ Request (application/json)

        {
            "VerificationCode": "received verification code",
            "ID": "User ID"
        }

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 400 (application/json)

        {
            "Code": "INVALID_VERIFICATION_CODE",
            "Message": "Verification code expired or invalid"
        }
+ Response 401 (application/json)

        {
            "Error": "INVALID_RESET_TOKEN"
        }


### Remove [DELETE /users]

Removes the entire user account, profiles, and all measurement data associated
with it. The account to be deleted is derived from the User Token.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

+ Response 401 (application/json)

        {
            "Error": "UNAUTHORIZED_ACCESS"
        }
+ Response 403 (application/json)

        {
            "Code": "Restricted Access"
        }


### Change Password [POST /users/changepassword]

This End Point allow user to change password for already verified user

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Request (application/json)

        {
            "Identifier": "Org identifier",
            "Email": "test@outlook.com",
            "Password": "myOldPassword",
            "NewPassword": "myNewPassword"
        }

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 400 (application/json)

        {
            "Code": "COMMON_PASSWORD",
            "Message": ""
        }


+ Response 400 (application/json)

        {
            "Code": "INSECURE_PASSWORD",
            "Message": ""
        }

### Logout [DELETE /users/auth]

Logs user out from all its sessions at once

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "success": true
        }

## Profiles [/profiles]

Profiles are elements of user accounts. A single user
account may maintain a number of profiles to help segment
different types of users.

### Create Profile [POST /users/profiles]

Creates a user profile under a main user account. User profiles
may be used to segment different accounts for measurements.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Name": "John",
                "Email": "doe@gmail.com"
            }

+ Response 200 (application/json)

        {
            "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d"
        }

+ Response 401 (application/json)

        {
            "Code": "NAMESPACE_DOESNT_EXIST"
        }

### Update Profile [PATCH /users/profiles/{ID}]

Updates a specific user profile. To update status the
valid options are: ACTIVE and INACTIVE.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Parameters
    + ID (string) - Profile ID to perform the update for.

+ Response 200 (application/json)

        {
            "Name": "John",
            "Email": "doe@gmail.com",
            "Status": "INACTIVE"
        }

+ Response 200 (application/json)

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Remove Profile [DELETE /users/profiles/{ID}]

Removes the user profile entirely. It also deletes any
related meta fields associated with the profile.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Parameters
    + ID (string) - Profile ID to perform the delete operation on.

+ Response 200 (application/json)

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Retrieve Profile [GET /users/profiles/{ID}]

Retrieves a single user Profile specified by `ID`.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Parameters
    + ID (string) - Profile ID to retrieve the user Profile.

+ Response 200 (application/json)

        {
            "ID": "2384b2-945c",
            "Name": "John",
            "Email": "doe@gmail.com",
            "Status": "ACTIVE",
            "MeasurementCount": 0,
            "Created": 1512325663,
            "Updated": 1512325663
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### List Profiles [GET /users/profiles{?UserProfileName,Status,Limit,Offset}]

Lists specific profiles managed under the current user account.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Parameters
    + UserProfileName: john@doe.com (string, optional) - Profile name
    + Status: ACTIVE (string, optional) - Profile status
    + Limit: 25 (number, optional) - limit the number of results
        + default 25
    + Offset: 0 (number, optional) - offset the number of results
        + default 0

+ Response 200 (application/json)

        [
            {
                "ID": "945c-4201-b121",
                "OwnerUserEmail": "myname@nuralogix.ai",
                "Name": "guest",
                "Email": "myname@nuralogix.ai",
                "Status": "ACTIVE",
                "MeasurementCount": 13,
                "Created": 1587128885,
                "Updated": 1587128885,
                "TotalCount": "2"
             },
            {
                "ID": "f613ef-6c30ccecd935",
                "OwnerUserEmail": "test@nuralogix.ai",
                "Name": "user",
                "Email": "test@nuralogix.ai",
                "Status": "ACTIVE",
                "MeasurementCount": 204,
                "Created": 1587067837,
                "Updated": 1587067837,
                "TotalCount": "2"
            }
        ]

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### List Profiles By User [GET /users/{ID}/profiles{?UserProfileName,Status,Limit,Offset}]

Lists specific profiles managed under a single user account specified by the `ID` in the request parameters.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Parameters
    + ID (string): Requested User UUID.
    + UserProfileName: john@doe.com (string, optional) - Profile name
    + Status: ACTIVE (string, optional) - Profile status
    + Limit: 25 (number, optional) - limit the number of results
        + default 25
    + Offset: 0 (number, optional) - offset the number of results
        + default 0

+ Response 200 (application/json)

        [   
            {
                "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d",
                "OwnerUserEmail": "doe@gmail.com",
                "Name": "user",
                "Email": "doe@gmail.com",
                "Status": "ACTIVE",
                "MeasurementCount": 10,
                "Created": 1490130485,
                "Updated": 1490130485,
                "TotalCount": "2"
            },
            {
                "ID": "3f6ff56d-3e37-4427-b09e-dcf20377fb1a",
                "OwnerUserEmail": "doe@gmail.com",
                "Name": "guest",
                "Email": "doe@gmail.com",
                "Status": "ACTIVE",
                "MeasurementCount": 10,
                "Created": 1490130485,
                "Updated": 1490130485,
                "TotalCount": "2"
            }
        ]

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

## Measurements [/measurements]

Measurements are individual one-time captures of blood flow data. A single
measurement record could represent multiple models of data analysis,
hence this data structure supports lookup parameters to filter them.

For consumers using the WebSocket transport method, extra options for streaming
live results are available. The detailed explanation of streaming implementation
will be added later.

**Note:**: A valid License is required in order to create Measurements and
submit data chunks for processing. Please make sure to call
<a href="/#reference/0/organizations/register-license">Register License</a>
endpoint first to receive a *Device Token Pair* that grants access to these
functions. Next, in order to have your user information associated with the
measurements, you can use <a href="/#reference/0/users/login">User Login</a>
endpoint to obtain a *User Token Pair*, which can be used to take Measurements
as well.

### Create [POST /measurements]

Begins a new data capture session and returns a measurement ID property, which
should be referenced for adding data chunks and retreiving results.

**Resolution:** currently can be either 0 or 100.
(default is 100)

- 100 means the result set will have 100% of the original size
- 0 returns 1 value per signal
- Based on License policy PartnerID is mandatory or optional.


+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "StudyID": "7ab8bee7-808c-4123-9811-e385adb8c77d",
                "Resolution": 100,
                "UserProfileID": "Profile`s UUID (optional)",
                "PartnerID": "<partnerID> (optional or mandatory depending on license policy)"
            }

+ Response 200 (application/json)

        {
            "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d"
        }

### Add Data [POST /measurements/{MeasurementID}/data]

Adds collected blood-flow data to a specific measurement. Upon submitting a
chunk of data, the API will return a `MeasurementDataID` value representing the
received chunk.  Data must be sent to the server in the order produced by the
DFX SDK. If a chunk it sent out of order, the server will return an error.
Please ensure that new chunks are only sent after the server responds with a
`MeasurementDataID`.

Submitting measurements has three stages: a) starting, b) measurement body, c)
closing a measurement. Each of these phases have the same payload structure
however a different `Action` flag is to be sent with each request and must
follow the `CHUNK::ACTION` format.

| Measurement Actions | Description                                                  |
| ------------------- | ------------------------------------------------------------ |
| `FIRST::PROCESS`    | Start a new measurement (drop any existing), Process results |
| `FIRST::IGNORE`     | Start a new measurement (drop any existing), Do not process  |
| `CHUNK::PROCESS`    | Arbitrary block of TOI data and process results              |
| `CHUNK::IGNORE`     | Arbitrary block of TOI data and do not process results       |
| `LAST::PROCESS`     | Finish a measurement cycle and process results               |
| `LAST::IGNORE`      | Finish a measurement cycle and do not process                |


`Payload` is binary data that can currently only be obtained by using our SDK.

For both the REST and WebSocket transports, the `Payload` (binary content)
field must be **base64-encoded**.

**Note:**: This endpoint is a subject to request throttling, you must not submit
more data than can be obtained in real time. i.e., do not send more than five
seconds of chunk data over the course of five seconds of real time.

Response Error Codes Explanation:

- "RATE_LIMIT": You have sent too many chunks in a given time period. See the
Note above.
- "MEASUREMENT_CLOSED": Requested Measurement is already finished. You need to
create a new Measurement.
- "MISALIGNED_CHUNK": Chunk Order was mismatched. i.e., ChunkOrder 2 was sent
before ChunkOrder 1.
- "INVALID_MEASUREMENT": Requested Measurement ID was not found.
- "UNPACKER_RPC_ERROR": Payload validation has been failed. Reason(s) will be
provided in error message.

+ Parameters
    + MeasurementID: Measurement UUID to add data to.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Action": "FIRST::PROCESS",
                "Payload": "binary payload, comes from SDK"
            }

+ Response 200 (application/json)

        {
            "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d",
            "ChunkOrder": 0
        }

+ Response 400 (application/json)

        {
            "Code": "UNPACKER_RPC_ERROR"
        }

+ Response 404 (application/json)

        {
            "Code": "INVALID_MEASUREMENT"
        }

+ Response 500 (application/json)

        {
            "Code": "MEASUREMENT_CLOSED"
        }

+ Response 500 (application/json)

        {
            "Code": "MISALIGNED_CHUNK"
        }

### List [GET /measurements{?Limit,Offset,Date,EndDate,UserProfileID,UserProfileName,PartnerID,StudyID,StatusID,Mode,Region}]

Provides a historical list of measurements captured by the API store. The
results of the measurements are captured and only displayed for the measurements
made by the token used in the header of this call. Each record has a status representing
its cycle in the system:

|Status Message |Description                                                                                                                  |
|---------------|---------------------------------------------------------------------------------------------------------------------------- |
| IN_PROGRESS   | A new measurement was created and API is waiting for payloads from the client.                                              |
| COMPLETE      | All signals were computed successfully and are ready for consumption.                                                       |
| ERROR         | An error occurred that caused a failure in processing the measurement entirely.                                             |
| INACTIVE      | Measurement was cancelled due to a new measurement being created with the same device ID.                                   |
| PARTIAL       | One or more signal(s) failed to be computed due to various reasons, but the rest of the signals were computed successfully. |

+ Parameters
    + Limit (integer, optional) - The number of measurements to pull from the list.
        + Upper Limit 100
        + default 25
    + Offset (integer, optional) - Offset to specify the start of the count.
        + default 0
    + Date (optional) - Measurement creation start date in the format YYYY-MM-DD.
    + EndDate (optional) - Measurement creation end date in the format YYYY-MM-DD
    + UserProfileID (string, optional) - filter by a Profile ID.
    + UserProfileName (string, optional) - filter by a Profile Name.
    + PartnerID (string, optional) - filter by Partner ID.
    + StudyID (string, optional) - filter by Study ID.
    + StatusID (string, optional) - filter by measurement Status ID.
    + Mode (string, optional) - filter by Mode (e.g. DISCRETE).


+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "Created": 1671647325,
                "Updated": 1671647370,
                "ID": "28c2823b-5360-49a9-a3b9-17ac8af9587b",
                "UserID": "ed855f12-248c-4bd9-baf9-6d847a1c431f",
                "UserProfileID": "3f6ff56d-3e37-4427-b09e-dcf20377fb1a",
                "UserProfileName": "user",
                "DeviceID": "ad3412ef-b3ef-4426-aacf-39984f2dc213",
                "StudyID": "bb61de8b-c64b-421c-9961-8bf4873fdef2",
                "StatusID": "COMPLETE",
                "PartnerID": null,
                "DeviceVersion": null,
                "Mode": "DISCRETE",
                "Region": "na-east",
                "TotalCount": 2
            },
            {
                "Created": 1671647214,
                "Updated": 1671647258,
                "ID": "42c1197a-5854-4ef2-88d8-0159204607a6"",
                "UserID": "ed855f12-248c-4bd9-baf9-6d847a1c431f",
                "UserProfileID": "3f6ff56d-3e37-4427-b09e-dcf20377fb1a",
                "UserProfileName": "user",
                "DeviceID": "ad3412ef-b3ef-4426-aacf-39984f2dc213",
                "StudyID": "bb61de8b-c64b-421c-9961-8bf4873fdef2",
                "StatusID": "COMPLETE",
                "PartnerID": null,
                "DeviceVersion": null,
                "Mode": "DISCRETE",
                "Region": "na-east"
            }
        ]

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }

### Retrieve [GET /measurements/{ID}]

The behavior of this endpoint depends upon the type of token used in the header.

  * *Using device token* - Will return the results for the measurements made by
the same device token as used in the header of this call.

  * *Using user token* - Will return the results for the measurements made by the
user whose credentials were used to generate the user token used in the header of
this call.

`Results` in response refer to the successful point signals, `Errors` in 
response refer to failed point signals, this will change according to 
the different requested signals specified by Study Template.

+ Parameters
    + ID (string) - Requested measurement UUID.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "Created": 1603378421,
            "Updated": 1603378457,
            "ID": "163e8499-e79c-4f42-bbc0-419e8adc6498",
            "OrganizationID": "d17e0fcd-e65d-45a8-af7a-6285d503d9d8",
            "StatusID": "COMPLETE",
            "UserID": "e8ff1a65-2afe-4be4-bded-6880e660fa2c",
            "UserProfileID": "e6f613ef-8fd2-4033-b509-6c30ccecd935",
            "DeviceID": "2c995d12-3c8b-4812-b604-ffa1876c2ff0",
            "StudyID": "17405480-3372-4564-918a-417edc93df23",
            "Resolution": 0,
            "DeviceVersion": null,
            "Comments": {},
            "Mode": "DISCRETE",
            "City": "Brampton",
            "State": "ON",
            "Country": "CA",
            "Region": "na-east",
            "PartnerID": null,
            "Results": {
                 "HR_BPM": [
                    {
                        "Data": [
                            851807.5
                        ],
                        "Channel": "slow/toi4",
                        "Multiplier": 10000,
                        "FPS": 30,
                        "Notes": []
                    }
                ],
                "SNR": [
                    {
                        "Data": [
                            8201
                        ],
                        "Channel": "slow/toi4",
                        "Multiplier": 10000,
                        "FPS": 30,
                        "Notes": []
                    }
                ]           
            },
            "Errors": {},
            "SignalNames": {},
            "SignalDescriptions": {},
            "SignalConfig": {},
            "SignalUnits": {},
            "DataSizeBytes": 0
        }

+ Response 404 (application/json)

        {
            "Code": "INVALID_MEASUREMENT"
        }

+ Response 401 (application/json)

        {
            "Code": "UNAUTHORIZED_ACCESS"
        }


### Subscribe to Results [GET /measurements/{ID}/results]

This endpoint is only accessible to socket transports. In order to receive live
results from a measurement, you must touch this endpoint. Included in the body
of the request you must supply a `RequestID` which is used as the response
identifier. The socket API will deliver results back consistently with the same
specified request identifier.

The results subscribership will automatically close on disconnection, completion of
a measurement. You can resubscribe for longer measurements if necessary.

The size of `RequestID` must be between 0 and 15.

### Notes in real-time results

Real-time results may also contain *notes* for each Point. They provide
additional information about the computation of the signal on the Cloud. If
present for a specific DFX Point, notes will be as a value to the `"Notes"` key
in that point. (e.g., for `ABSI` they will be at
`result/"Channels/"ABSI"/"Notes"`).

`"Notes"` is an enum; multiple notes may be present against a single Point. They
are described in the table below:

| Note                       | Description                                                                          |
| -------------------------- | ------------------------------------------------------------------------------------ |
| NOTE_USED_PRED_DEMOG       | User profile data was predicted for computations since user-entered data was missing |
| NOTE_SNR_BELOW_THRESHOLD   | `SNR` was below 0.5 db; no additional signals were computed                          |
| NOTE_FT_LIVENSSS_FAILED    | First liveness test failed                                                           |
| NOTE_MODEL_LIVENSSS_FAILED | Second liveness test failed                                                          |
| NOTE_MISSING_MEDICAL_INFO  | Medical history questionnaire information was not sent                               |
| NOTE_DEGRADED_ACCURACY     | Signal computation suffered from degraded accuracy                                   |

### Errors

A measurement may have one of the following errors received from the DeepAffex™ backend:

| Error code     | Description                                                                                                                                                                                                              | Measurement status |
| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------ |
| WORKER_ERROR   | It is an unrecoverable internal error at the DeepAffex™  backend.                                                                                                                                                        | `ERROR`            |
| LIVENESS_ERROR | The SNR (Signal to Noise Ratio) of the entire measurement was too low to meet our minimum threshold (0.5 dB). If this error is received then the measurement will only return one point i.e. SNR with -100 as the value. | `PARTIAL`          |
| ANALYSIS_ERROR | There was a failure while computing a signal. The returned JSON will have a `signal_id` key and a value string indicating the reason behind failure.                                                                     | `PARTIAL`          |

The `Errors` field in the JSON will have the following format:
```json
"Errors": {
  "Code": "<Error code>",
  "Errors": {
    "<signal_id>": {
      "msgs": [
        "<Error description>"
      ]
    }
  }
}
```

+ Parameters
    + ID (string) - Requested measurement UUID.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "RequestID": "0000000001"
            }

+ Response 200 (application/json)

## Organizations [/organizations]

This set of endpoints covers functions that allow to access resources on the Organizational level.
All endpoints require Researcher, Lead or Admin access.

### Retrieve [GET]

Retrieves information related to the current organization account.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d",
            "Name": "NuraLogix Corporation",
            "Identifier": "nuralogix-corp",
            "StatusID": "ACTIVE",
            "Contact": null,
            "Email": null,
            "OrgAddresses": [],
            "Logo": null,
            "BrandID": "7ab8bee7-808c-4123-9811-e385adb8c77d",
            "ConsentId": null,
            "Created": 1490130485,
            "Updated": 1490130485
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Update [PATCH]

Updates current organization's account general information (name, logo, contact info). 
This endpoint would only update fields supplied to it, hence sending only Name or Logo will exclusively update those values. 

This call requires DFX\_ORG\_ADMIN level permissions.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Name": "New Name",
                "Identifier": "new-identifier",
                "Contact": "FirstName LastName",
                "Email": "contact@email.com",
                "Logo": null
            }

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }


### Users [GET /organizations/users{?Limit,Offset,Date,EndDate,UserName,Gender,RoleID,Region}]

Retrieves a list of users in the current organization.

Accessible by users with Admin, and Lead role.

+ Parameters
    + Limit (integer, optional) - The number of users to pull from the list.
        + default 25
    + Offset (integer, optional) - Offset of the results to start at.
        + default 0
    + Date (string, optional) - Account creation start date in the format YYYY-MM-DD.
    + EndDate (string, optional) - Account creation end date in the format YYYY-MM-DD.
    + UserName (string, optional) - filter by User's email address.
    + Gender (string, optional) - filter by User's Gender (i.e. 0-male, 1-female, 2-other).
    + RoleID (string, optional) - filter by user's Role ID.
    + Region (string, optional) - filter by Region (e.g. na-east, eu-central, sa-east, as-east, as-hk. For details, please refer to https://docs.deepaffex.ai/guide/cloud/2-1_regions.html#geographic-location-and-associated-routing-rules).

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "Gender": "male",
                "DateOfBirth": null,
                "Created": 1640875819,
                "Updated": 1660842832,
                "ID": "d2f46a51-af9b-49e3-86f0-82537447e8c3",
                "FirstName": "John",
                "LastName": "Test",
                "Email": "john3@example.com",
                "PhoneNumber": null,
                "RoleID": "NURA_APP_USER",
                "LoginMethod": "Email",
                "Region": "na-east",
                "PasswordSetDate": "2021-12-30T14:51:21.194Z",
                "MFAEnabled": false,
                "TotalCount": 88
            },
            {
                "Gender": "female",
                "DateOfBirth": null,
                "Created": 1639666863,
                "Updated": 1671653452,
                "ID": "5826637c-303a-4357-9845-16e00f09c7e8",
                "FirstName": "John",
                "LastName": null,
                "Email": "john2@example.com",
                "PhoneNumber": null,
                "RoleID": "NURA_APP_USER",
                "LoginMethod": "Email",
                "Region": "na-east",
                "PasswordSetDate": "2021-12-16T15:01:03.856Z",
                "MFAEnabled": false
            }
        ]

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Create User [POST /organizations/users]

Creates a user with role DFX_BASIC_USER under the organization. Available only to an Administrator.

An email will be sent to submitted Email address with a link to setup password
for the account. To create a user under your organization. You will need to be
logged in as a DFX_LEAD,  DFX_ORG_ADMIN

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "FirstName"   : "John",
                "LastName"    : "Appleseed",
                "Email"       : "john@example.com",
                "Gender"      : "male",
                "DateOfBirth" : "1986-02-10",
                "RoleID"      : "RoleID"
            }

+ Response 200 (application/json)

        {
            "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d"
            "ResetToken": "41f20423-e295-474d-9f52-f784b5a439cb"
        }

+ Response 401 (application/json)

        {
          "Code"    : "VALIDATION",
          "Errors"  : {
            "DateOfBirth": [ "INVALID_DATE_RANGE" ]
          }
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Register License [POST /organizations/licenses]

Allows consumers to exchange a license key for a Device Token Pair (a Device token 
and a One-Time Refresh Token).

This endpoint is accessible publically to all consuming clients. License keys
are mapped against an organization. Upon submitting a registration key and
relevant information associated with the device to be registered, DFX API will
respond with a referencing DeviceID and a token pair for future device-specific API
requests. A _Device Token_ and a _One-Time Refresh Token_ are returned.

The longevity and allowed origins of the token can be controlled by
`TokenExpiresIn` and `TokenSubject` optional parameters. `TokenExpiresIn`
specifies token validity duration in seconds. Effective duration will be
calculated as a minimum of `TokenExpiresIn` and license `Expiration` date; i.e., this parameter can only be
used to further reduce token's lifespan.

`TokenSubject` locks the host which is allowed to use the token for its
communication with DeepAffex. When set, the server will compare the token value
with HTTP request's `Referer` header and reject the request if those don't
match.

**Note:** Please make sure to store the obtained tokens securely as most
Licenses (e.g. Trial) allow for a limited number of registered Devices. To
unregister a Device and get back one license, call the
<a href="/#reference/0/organizations/unregister-license">Unregister License</a>
endpoint with your `Device Token`.

+ Request (application/json)

        {
            "Key": "LICENSE_KEY",
            "DeviceTypeID": "LINUX",
            "Name": "DFX Desktop",
            "Identifier": "DFXCLIENT",
            "Version": "1.0.0",
            "TokenExpiresIn": 20,
            "TokenSubject": "https://deepafex.ai"
        }

+ Response 200 (application/json)

        {
            "DeviceID": "876ff630-84f8-45d8-b30e-6ebeb42c0d85",
            "Token": "DEVICE_TOKEN",
            "RefreshToken": "REFRESH_TOKEN",
            "RoleID": "Role associated with your License",
            "UserID": "User account associated with your License"
        }

+ Response 404 (application/json)

        {
            "Code": "INVALID_LICENSE_KEY",
            "Message": "License Key LICENSE_KEY not found"
        }

+ Response 401 (application/json)

        {
            "Code": "LICENSE_EXPIRED",
            "Message": "License has been expired"
        }

### Unregister License [DELETE /organizations/licenses]

Send your `Device Token` as the Authorization header to decommission a registered
device. Note that this does not delete the Device.


+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>


+ Response 200 (application/json)


+ Response 404 (application/json)

        {
            "Code": "DEVICE_NOT_ACTIVE",
            "Message": "Device must be Active in order to be deregistered"
        }

### Logo [GET /organizations/{ID}/logo]

Retrieves an Organization logo. This endpoint will return a buffer containing a
logo

+ Parameters

    + ID (string) - Organization ID.


+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "{\"Name\":\"杭州师范大学附属医院 (HZ2Y)\",\"Identifier\":\"zjnu\",\"Created\":1536170947,\"Updated\":1536170947}"
        }

### List Measurements [GET /organizations/measurements{?Limit,Offset,Date,EndDate,UserName,UserProfileID,UserProfileName,PartnerID,StudyID,StatusID,Mode,Region}]

Similar to <a href="/#reference/0/measurements/list">Measurements --> List</a>
but retrieves all measurements across an Organization.

Accessible by users with Admin, Lead or Researcher role.

+ Parameters
    + Limit (integer, optional) - The number of measurements to pull from the list.
        + Upper Limit 100
        + default 25
    + Offset (integer, optional) - Offset to specify the start of the count.
        + default 0
    + Date (date, optional) - Measurement creation start date in the format YYYY-MM-DD.
    + EndDate (date, optional) - Measurement creation end date in the format YYYY-MM-DD.
    + UserName (string, optional) - filter by User's email address or phone number.
    + UserProfileID (string, optional) - filter by a Profile ID.
    + UserProfileName (string, optional) - filter by a Profile Name.
    + PartnerID (string, optional) - filter by Partner ID.
    + StudyID (string, optional) - filter by Study ID.
    + StatusID (string, optional) - filter by single measurement Status ID (e.g. COMPLETE) or multiple measurement Status IDs (e.g. COMPLETE,PARTIAL).
    + Mode (string, optional) - filter by Mode (e.g. DISCRETE).
    + Region (string, optional) - filter by Region (e.g. na-east, eu-central, sa-east, as-east, as-hk. For details, please refer to https://docs.deepaffex.ai/guide/cloud/2-1_regions.html#geographic-location-and-associated-routing-rules).

    
    
    

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "Created": 1671819244,
                "Updated": 1671819282,
                "ID": "ca88f373-b24c-4111-a21d-7948946f2178",
                "StudyID": "c4ba9062-a183-4624-ac5a-710eff8741d2",
                "StatusID": "COMPLETE",
                "DeviceID": "e4fd5a6c-80bb-4035-b873-a472ef4732b2",
                "Mode": "DISCRETE",
                "PartnerID": null,
                "Region": "na-east",
                "UserName": null,
                "UserProfileName": null,
                "TotalCount": 2
            },
            {
                "Created": 1671807507,
                "Updated": 1671807572,
                "ID": "88de56e4-c17b-44e7-89ef-9e04aa399286",
                "StudyID": "c4ba9062-a183-4624-ac5a-710eff8741d2",
                "StatusID": "COMPLETE",
                "DeviceID": "e4fd5a6c-80bb-4035-b873-a472ef4732b2",
                "Mode": "DISCRETE",
                "PartnerID": null,
                "Region": "na-east",
                "UserName": null,
                "UserProfileName": null
                }
        ]

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Retrieve Measurement [GET /organizations/measurements/{ID}]

Similar to <a href="/#reference/0/measurements/retrieve">Measurements --> Retrieve</a>
but retrieves a measurement across the Organization.

Accessible by users with Admin, Lead or Researcher role.

+ Parameters
    + ID (string) - Requested measurement UUID.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "ID": "88de56e4-c17b-44e7-89ef-9e04aa399286",
            "OrganizationID": "d17e0fcd-e65d-45a8-af7a-6285d503d9d8",
            "StatusID": "WARNING",
            "UserID": "6f4db33e-abd2-435d-ab68-c7ddd39cf5c2",
            "UserProfileID": null,
            "DeviceID": "e4fd5a6c-80bb-4035-b873-a472ef4732b2",
            "StudyID": "c4ba9062-a183-4624-ac5a-710eff8741d2",
            "Resolution": 0,
            "DeviceVersion": null,
            "Comments": {}
            "Mode": "DISCRETE",
            "City": "Markham",
            "State": "ON",
            "Country": "CA",
            "Region": "na-east",
            "PartnerID": null,
            "Results": {
                "HR_BPM": [
                    {
                        "Data": [
                            851807.5
                        ],
                        "Channel": "slow/toi4",
                        "Multiplier": 10000,
                        "FPS": 30,
                        "Notes": []
                    }
                ],
                "SNR": [
                    {
                        "Data": [
                            8201
                        ],
                        "Channel": "slow/toi4",
                        "Multiplier": 10000,
                        "FPS": 30,
                        "Notes": []
                    }
                ]
            },
            "Errors": {},
            "SignalNames": {},
            "SignalDescriptions": {},
            "SignalConfig": {},
            "SignalUnits": {},
            "DataSizeBytes": 143000,
            "Created": 1498815622,
            "Updated": 1498815622
        }

+ Response 403 (application/json)

        {
            "Code": "FORBIDDEN",
            "Message": ""
        }

### List Profiles [GET /organizations/profiles{?Limit,Offset,Date,EndDate,OwnerUser,UserProfileName,StatusID}]

Similar to <a href="/#reference/0/profiles/list">Profiles --> List</a> but
retrieves Profiles across the Organization.

Accessible by users with Researcher or Admin role.

+ Parameters
    + Limit: (integer, optional) - The number of profiles to pull from the list.
        + default 25
    + Offset: (integer, optional) - Offset to specify the start of the count.
        + default 0
    + Date (date, optional) - Profile creation start date in the format of YYYY-MM-DD.
    + EndDate (date, optional) -  Profile creation end date in the format of YYYY-MM-DD.
    + OwnerUser (string, optional) - filter by User's email address or phone number.
    + UserProfileName (string, optional) - filter by Profile Name.
    + StatusID (string, optional) - filter by Profile Status ID (e.g. ACTIVE).   

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d"
                "Name": "John",
                "Email": "doe@gmail.com",
                "Status": "INACTIVE",
                "MeasurementCount": "5",
                "OwnerUser": null,
                "Created": 1490130485,
                "Updated": 1490130485,
                "TotalCount": 2
            },
            {
                "ID": "7ab8bee7-808c-4123-9811-e385adb8c77e"
                "Name": "Mike",
                "Email": "mike@gmail.com",
                "Status": "ACTIVE",
                "MeasurementCount": "2",
                "OwnerUser": null,
                "Created": 1490130485,
                "Updated": 1490130485,
            }
        ]

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Retrieve Profile [GET /organizations/profiles/{ID}]

Similar to <a href="/#reference/0/profiles/retrieve">Profiles --> Retrieve</a>
but retrieves a Profile across the Organization.

Accessible by users with Researcher or Admin role.

+ Parameters
    + ID (string) - Profile UUID

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "ID": "364d3fb2-d018-48f1",
            "Name": "John",
            "Email": "doe@gmail.com",
            "Status": "ACTIVE",
            "MeasurementCount": 8,
            "Created": 1512325663,
            "Updated": 1512325663
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Update Profile [PATCH /organizations/profiles/{ID}]

Similar to <a href="/#reference/0/profiles/update">Profiles --> Update</a> but
updates a Profile from the Organization.

Accessible by users with Researcher or Admin role.

+ Parameters
    + ID (string) - Profile ID to perform the update on.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Name": "John",
                "Email": "doe@gmail.com",
                "Status": "INACTIVE"
            }

+ Response 200 (application/json)

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }


### Retrieve User [GET /organizations/users/{ID}]

Similar to <a href="/#reference/0/users/retrieve">Users --> Retrieve</a> but
retrieves a User from the Organization.

Accessible only by users with Admin role.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {

            "Gender": "other",
            "DateOfBirth": null,
            "Created": 1604687477,
            "Updated": 1604687477,
            "ID": "ac4d-5687b8777f2a",
            "OrganizationID": "d65d-45a8-af7a-6285d503d9d8",
            "RoleID": "NURA_APP_USER",
            "StatusID": "ACTIVE",
            "Email": "testu@nuralogix.ai",
            "Password": "fT4uGGEjNHn83lM.C6K6CyzPWYZUV.2",
            "FirstName": null,
            "LastName": null,
            "ResetToken": null,
            "ResetTokenDate": null,
            "AvatarURI": null,
            "IsVerified": true,
            "VerificationCode": "na",
            "PhoneNumber": null,
            "DeviceID": "122257c7-a5e5-b096eaa2f00c",
            "HeightCm": null,
            "WeightKg": null,
            "LoginMethod": "Email",
            "SSOID": null,
            "Region": "na-east"
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Update User [PATCH /organizations/users/{ID}]

Similar to <a href="/#reference/0/users/update">Users --> Update</a> but updates
a User from the Organization.

Accessible only by users with Admin role.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "FirstName": "John",
                "LastName": "Appleseed",
                "Gender": "male",
                "DateOfBirth": "1986-02-10",
                "HeightCm": "180",
                "WeightKg": "60"
            }

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Delete User [DELETE /organizations/users/{ID}]

Similar to <a href="/#reference/0/users/remove">Users --> Remove</a> but
performed by an Organization's Admin.

Accessible only by users with Admin role.

+ Parameters
    + ID: user account ID

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Login [POST /organizations/auth]

Login and obtain a User Token Pair.

**Note:** User Token obtained from this endpoint does not allow you to take
Measurements and is intended for viewing purposes only.

**Note:** `MFAToken` parameter is required only when 2FA authentication is
enabled. See <a href="/#reference/0/users/create-two-factor-authentication-secret">User --> Create secret</a>

+ Request (application/json)

            {
                "Email": "joe@example.com",
                "Password": "foobar",
                "Identifier": "org_identifier",
                "MFAToken": "123456"
            }

+ Response 200 (application/json)

        {
            "Token": "USER_TOKEN",
            "RefreshToken": "USER_REFRESH_TOKEN"
        }

+ Response 401 (application/json)

        {
            "Code": "INVALID_CREDENTIALS",
            "Message": "Invalid Credentials"
        }

+ Response 429 (application/json)

        {
            "Code": "TOO_MANY_LOGIN_ATTEMPTS",
            "Message": ""
        }

### Login with token [POST /organizations/auth/token]

Login with a Token obtained from another endpoint such as <a href="/#reference/0/organizations/register-license">Register License</a>.

**NOTE:** In certain situations, it's not possible to manipulate the header of the Websocket request which is needed to authenticate against the DeepAffex Cloud. (e.g. when using Websockets in browsers.) This endpoint allows the DeepAffex Cloud to accept a token via the body of the request and not as part of the header. After the token is validated by the DeepAffex Cloud, the Websocket connection is considered to be authenticated and other Websocket requests (e.g. Measurement.AddData, Measurement.SubscribeToResults etc., may be made.)

+ Request (application/json)

            {
               "Token": "USER_TOKEN"
            }

+ Response 200 (application/json)

        {
            "Token": "USER_TOKEN",
        }

+ Response 400 (application/json)

        {
            "Code": "VALIDATION_ERROR",
            "Message": ""
        }
        
+ Response 400 (application/json)

        {
            "Code": "NO_TOKEN",
            "Message": ""
        }

+ Response 401 (application/json)

        {
            "Code": "UNRECOGNIZED_TOKEN",
            "Message": ""
        }

+ Response 401 (application/json)

        {
            "Code": "TOKEN_EXPIRED",
            "Message": "Your token has expired"
        }

+ Response 401 (application/json)

        {
            "Code": "TOKEN_EXPIRED",
            "Message": "Your token has expired due to inactivity"
        }

+ Response 401 (application/json)

        {
            "Code": "AUTHENTICATION_ERROR",
            "Message": "Invalid token"
        }

+ Response 401 (application/json)

        {
            "Code": "INCORRECT_TOKEN_SUBJECT",
            "Message": ""
        }

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

## Studies [/studies]

Studies are organized segments of analyses that guide the measurement
process. Studies consist of `Types`, `Templates` and `Assets`. A study
type is a general, high-level grouping for studies. A template is a
pre-built study standard created and made available by the Nuralogix team.
Templates are version controlled and named for use with a study.


### Types [GET /studies/types{?StatusID}]

Retrieves a list of studies that act as templates or base types. Types
can be filtered by the Status querystring value. This is useful for
looking up all studies and current.

+ Parameters
    + StatusID (string, optional) - Filter for listing by status flag.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "ID": "GENERAL",
                "StatusID": "ACTIVE",
                "Name": "Generic",
                "Description": "\"Non-specific\" industry and/or application area."
            },
            {
                "ID": "HEALTH",
                "StatusID": "ACTIVE",
                "Name": "Health",
                "Description": "\"Health/Wellness\" applications and/or related activities."
            },
            {
                "ID": "EMOTION",
                "StatusID": "ACTIVE",
                "Name": "Emotion",
                "Description": "\"Emotion decoding\" applications and/or related activities."
            },
            {
                "ID": "FINTECH",
                "StatusID": "ACTIVE",
                "Name": "Fintech",
                "Description": "\"Financial Tech\" industry (e.g. Credit Risk assessment) and/or related activities."
            },
            {
                "ID": "MARKETING",
                "StatusID": "ACTIVE",
                "Name": "Marketing",
                "Description": "\"Marketing\" applications (e.g. Product awareness) and/or related activities."
            },
            {
                "ID": "CONSUMER",
                "StatusID": "ACTIVE",
                "Name": "Consumer",
                "Description": "\"Consumer\" applications and/or related activities."
            },
            {
                "ID": "GAMING",
                "StatusID": "ACTIVE",
                "Name": "Gaming",
                "Description": "\"Gaming\" industry (e.g. video, electronic) and/or related activities."
            },
            {
                "ID": "INSURANCE",
                "StatusID": "ACTIVE",
                "Name": "Insurance",
                "Description": "\"Insurance\" industry and/or related activities."
            },
            {
                "ID": "SAFETY",
                "StatusID": "ACTIVE",
                "Name": "Safety",
                "Description": "Public \"Safety\" industry and/or related activities."
            },
            {
                "ID": "MEDIA",
                "StatusID": "ACTIVE",
                "Name": "Media",
                "Description": "Public \"Media\" industry (e.g. public videos) and/or related activities."
            }
        ]

### List Templates [GET /studies/templates/{?Status,Type,Limit,Offset,SortOrder,SortBy}]

Retrieves a list of study templates that exist in a particular organization.

+ Parameters
    + Limit (integer, optional) - The number of study templates to pull from the list. 
        + default returns all the templates
    + Offset (integer, optional) - offset to specify the start of the count.
        + default 0
    + Status: ACTIVE (string, optional) - If provided, narrows down results to
    templates of a specific StatusID.
    + Type: HEALTH (string, optional) - If provided, narrows down results to
    templates of a specific StudyTypeID.
    + SortOrder (string, optional) - sorting order ASC or DESC.
    + SortBy (string, optional) - key to sort by (e.g. "Name")

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "ID": "76f59b35-0e5f-4d19-8563-6891g5091d1e",
                "StatusID": "ACTIVE",
                "Name": "ANURA_AGW",
                "Description": "Anura Template with AGW points",
                "Config": {},
                "StudyTypeID": "GENERAL",
                "Created": 1648564820,
                "Signals": [
                    "BP_SYSTOLIC",
                    "BP_DIASTOLIC",
                    "HR_BPM",
                    "MSI",
                    "SNR",
                    "STRESS_SCORE"
                ],
                "RemainingMeasurement": null
            }
        ]



### Create [POST /studies]

Creates a new study within an organization. Studies must be based
on a specific StudyTemplateID. Passing in config will override
values available in the StudyType definition template.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Name": "New Study Type Name",
                "Description": "This is a description for a study.",
                "StudyTemplateID": "UUID",
                "Config": {
                    "Key": "Value"
                }
            }

+ Response 200 (application/json)

        {
            "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d"
        }

+ Response 403 (application/json)

        {
            "Code": "TEMPLATE_ACCESS_DENIED"
        }

### Update [PATCH /studies/{ID}]

Updates a particular study record with new information. Organizations
can set the status of a particular study as well to record their
general activity and visibility. Study templates cannot be revised
after a study is created.

+ Parameters
    + ID (string) - The UUID of the study to update.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Name": "Study Type Sample",
                "StatusID": "INACTIVE",
                "Description": "New description goes here.",
                "Config": {}
            }

+ Response 200 (application/json)

        {
            "success": true
        }

### Retrieve [GET /studies/{ID}]

Retrieves a study record with it's definitions and values. It also
displays the amount of measurements captured in it to date.

+ Parameters
    + ID (string) - The UUID of the study to retrieve.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

            {
                "ID": "e2e3c2aa-e428-45a3-b28b-27f053a5676",
                "Name": "DStudy",
                "Description": "study",
                "StatusID": "ACTIVE",
                "OrganizationID": "45a8-af7a-6285d503d9d8",
                "StudyTemplateID": "b53bbda9-7698-422a-a400-aea7c776786",
                "StudyTemplateName": "Study",
                "Measurements": 2,
                "Participants": 1,
                "Signals": [],
                "Created": 1553012685,
                "Updated": 1553012685
            }

### Retrieve SDK Study Config Data [POST /studies/sdkconfig]

Retrieves a study's binary config data that has to be used to initialize
the DFX SDK Factory object. Get the SDKID parameter by calling GetSDKId on
the DFX SDK Factory object. SDKID field is optional field in request body. If SDKID is not passed, the "default"
config data will be returned.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "StudyID": "e2e3c2aa-e428-45a3-b28b-27f053a5676",
                "SDKID": "4.4.1,1.4,Windows,AMD64",
            }

+ Response 200 (application/json)

        {
            "ConfigFile": {
                "type": "Buffer",
                "data": [55,56,44,56,53,44,49,44,...]
            },
            "MD5Hash":"ca08cb5c01a207b4a43e9ad404adcc9a",
        }


### Delete [DELETE /studies/{ID}]

Deletes a study. However, if there are any measurements taken under that Study
already, it cannot be deleted.

+ Parameters
    + ID (string) - The UUID of the study to delete.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

          {
            "success": true
          }

### List [GET /studies{?Limit,Offset,Date,EndDate,Name,StatusID}]

Lists all the studies created in an organization.

+ Parameters
    + Limit (integer, optional) - The number of studies to pull from the list. 
        + default 25
    + Offset (integer, optional) - Offset to specify the start of the count.
        + default 0
    + Date (date, optional) - Study creation start date in the format of YYYY-MM-DD.
    + EndDate (date, optional) - Study creation end date in the format of YYYY-MM-DD.
    + Name (string, optional) - filter by Study Name.
    + StatusID: (string, optional) - filter by Study Status ID (e.g. ACTIVE/DELETED).

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "ID": "e2e3c2aa-e428-45a3-b28b-27f053a56767",
                "Name": "Test Study",
                "Description": "Test study",
                "StudyTemplateID": "b53bbda9-7698-422a-a400-aea7c7e09898",
                "Measurements": 2,
                "Participants": 1,
                "StatusID": "ACTIVE",
                "Created": 1553012685,
                "Updated": 1553012685,
                "TotalCount": 2
            },
            {
                "ID": "e2e3c2aa-e428-45a3-b28b-27f053a56767",
                "Name": "Test Study",
                "Description": "Test study",
                "StudyTemplateID": "b53bbda9-7698-422a-a400-aea7c7e09898",
                "Measurements": 2,
                "Participants": 1,
                "StatusID": "DELETED",
                "Created": 1553012685,
                "Updated": 1553012685
            }
        ]

## Devices [/devices]

Devices can be used to record the platform by which a measurement captured was
conducted on. The DeviceTypeID references a pre-defined set of devices with the
following chart. New Device Types cannot be created by organizations and are
managed by the API specifically. Devices types can be retrieved from a dedicated
endpoint returning all their values and meanings.

### Types [GET /devices/types]

Retrieves a list of allowed device types.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "ID": "IPHONE",
                "Name": "iPhone",
                "Description": "All iPhone devices.",
                "IsMobile": true,
                "IsTablet": false,
                "IsDesktop": false
            },
            {
                "ID": "ANDROID_PHONE",
                "Name": "Android",
                "Description": "Phone All Android based phone devices.",
                "IsMobile": true,
                "IsTablet": false,
                "IsDesktop": false
            },
            {
                "ID": "IPAD",
                "Name": " iPad",
                "Description": "All generations of iPad devices.",
                "IsMobile": false,
                "IsTablet": true,
                "IsDesktop": false
            },
            {
                "ID": "LINUX",
                "Name": "Linux",
                "Description": "Linux-based devics.",
                "IsMobile": false,
                "IsTablet": false,
                "IsDesktop": true
            },
            {
                "ID": "DEBIAN",
                "Name": "Debian",
                "Description": "Debian-based devices.",
                "IsMobile": false,
                "IsTablet": false,
                "IsDesktop": true
            },
            {
                "ID": "DARWIN",
                "Name": "MacOS",
                "Description": "Desktop MacOS-based systems.",
                "IsMobile": false,
                "IsTablet": false,
                "IsDesktop": true
            },
            {
                "ID": "WINDOWS_TABLET",
                "Name": "Windows Tablet",
                "Description": "Tablets Windows-based tablet devices.",
                "IsMobile": false,
                "IsTablet": true,
                "IsDesktop": false
            },
            {
                "ID": "WIN32",
                "Name": "Windows 32bit",
                "Description": "Desktop Windows-based systems.",
                "IsMobile": false,
                "IsTablet": false,
                "IsDesktop": true
            },
            {
                "ID": "WINDOWS",
                "Name": "Windows 64bit",
                "Description": "Desktop Windows-based systems.",
                "IsMobile": false,
                "IsTablet": false,
                "IsDesktop": true
            }
        ]

+ Response 401 (application/json)

        {
            "Error": "UNAUTHORIZED_ACCESS"
        }

### Create [POST]

Creates a new device reference to associate with measurements. Each
device is mapped to a device type ID.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Name": "Room 1 Device",
                "DeviceTypeID": "IPHONE",
                "Identifier": "68753A44-4D6F-1226-9C60-0050E4C00067",
                "Version": "1.0.0"
            }

+ Response 200 (application/json)

        {
            "ID": "7ab8bee7-808c-4123-9811-e385adb8c77d"
        }


### Update [PATCH /devices/{ID}]

Updates a device reference via the UUID supplied.

+ Parameters
    + ID (string, optional) - Requested device UUID.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

    + Body

            {
                "Name": "Room 1 Device",
                "DeviceTypeID": "IPHONE",
                "Status": "ACTIVE",
                "Identifier": "68753A44-4D6F-1226-9C60-0050E4C00067",
                "Version": "1.0.0"
            }

+ Response 200 (application/json)

+ Response 401 (application/json)

        {
            "Error": "UNAUTHORIZED_ACCESS"
        }

### Retrieve [GET /devices/{ID}]

Retrieves a single reference to a device. The body response
includes details about the device and the number of measurements
that have been associated with it.

+ Parameters
    + ID (string, optional) - Requested device UUID.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "Name": "Test 2",
            "DeviceTypeID": "IPHONE",
            "StatusID": "ACTIVE",
            "Identifier": "2b6f0cc904d137be2e1730235f5664094b831186",
            "Version": "7",
            "Created": 1498764953,
            "Updated": 1498764953,
            "count": "1",
            "Region": "na-east"
        }


+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### List [GET /devices{?Limit,Offset,Date,EndDate,Name,Version,StatusID,DeviceTypeID,LicenseID,SortOrder}]

Retrieves a list of existing devices in an organization.

+ Parameters
    + Limit (integer, optional) - The number of devices to pull from the list.
        + default 25
    + Offset (integer, optional) - Offset to specify the start of the count.
        + default 0
    + Date (date, optional) - Device creation start date in the format of YYYY-MM-DD.
    + EndDate (date, optional) - Device creation end date in the format of YYYY-MM-DD.
    + Name (string, optional) - filter by Device Name.
    + Version (string, optional) - filter by Device Version.
    + StatusID (string, optional) - filter by Device Status ID (e.g. ACTIVE/DECOMMISSIONED).
    + DeviceTypeID (string, optional) - filter by Device Type ID.
    + LicenseID (string, optional) - filter by License ID.
    + SortOrder (string, optional) - filter by sorting order (e.g. ASC/DESC).

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "ID": "0a093681-f37e-44be-9d46-b98322b2adcv",
                "Name": "Public",
                "DeviceTypeID": "WIN32",
                "StatusID": "DECOMMISSIONED",
                "Identifier": "TEST1",
                "Version": "123.223.123",
                "Measurements": 0,
                "LicenseID": "ee5a6114-cdef-4162-b62f",
                "Region": "na-east",
                "Created": 1555102817,
                "Updated": 1555102817,
                "TotalCount": 123
            },
            {
                "ID": "219fc464-fe6d-46f4-8b3e-a69c9571dfty",
                "Name": "Public",
                "DeviceTypeID": "WIN32",
                "StatusID": "ACTIVE",
                "Identifier": "TEST1",
                "Version": "123.223.123",
                "Measurements": 0,
                "LicenseID": "ee5a6114-cdef-4162-b62f",
                "Region": "na-east",
                "Created": 1555100002,
                "Updated": 1555100002
            }
        ]

+ Response 403 (application/json)

        {
            "Code": "RESTRICTED_ACCESS",
            "Message": ""
        }

### Retrieve license ID [GET /devices/license]

Retrieves the license information associated with the device token.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "ID": "abca6114-b62f-e74c6df2213d",
            "LicenseType": "MOBILE",
            "LicenseTypeID": "MOBILE",
            "StatusID": "ACTIVE",
            "Expiration": null,
            "MaxDevices": null
        }

## Licenses [/licenses]

These endpoints allow to list Licenses available to your User / Organization.


### Get Organization Licenses [GET /licenses/organization{?Limit,Offset,Date,EndDate,StatusID,LicenseTypeID,LicenseType}]

List licenses available to your Organization.

+ Parameters
    + Limit (integer, optional) - The number of licenses to pull from the list.
        + default 25
    + Offset (integer, optional) - Offset to specify the start of the count.
        + default 0
    + Date (date, optional) - License creation start date in the format of YYYY-MM-DD.
    + EndDate (date, optional) - License creation end date in the format of YYYY-MM-DD.
    + StatusID (string, optional) - filter by License Status ID (e.g. ACTIVE/EXPIRED).
    + LicenseTypeID (string, optional) - filter by License Type ID.
    + LicenseType (string, optional) - filter by License Type.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        [
            {
                "Created": 1651087621,
                "ID": "e42d8197-c0ad-4ccd-8cfa-802517328264",
                "StatusID": "ACTIVE",
                "Expiration": "2023-04-27T19:26:51.000Z",
                "MaxDevices": null,
                "OrganizationID": "d17e0fcd-e65d-45a8-af7a-6285d503f9d8",
                "DeviceRegistrations": 20,
                "LicenseTypeID": "KIOSK",
                "LicenseType": "KIOSK",
                "Key": "ee560c18-cd8f-4b62-b28c-9dd2cddf9dda",
                "SDKPlatforms": [],
                "Username": null,
                "TotalCount": 9
            },
            {
                "Created": 1650907351,
                "ID": "a8d9772e-a5a5-4020-97cc-607461d4c47e",
                "StatusID": "EXPIRED",
                "Expiration": "2022-05-25T17:21:33.000Z",
                "MaxDevices": null,
                "OrganizationID": "d17e0fcd-e65d-45a8-af7a-6285d503f9d8",
                "DeviceRegistrations": 0,
                "LicenseTypeID": "MOBILE",
                "LicenseType": "MOBILE",
                "Key": "d5c4ef50-a584-4770-8363-7b7726214a9e",
                "SDKPlatforms": [],
                "Username": null
            }
        ]


### Get Organization License [GET /licenses/organization/{ID}]

Retrieve a single organization license specified by ID.

+ Parameters
    + ID (string, optional) - Requested license UUID.

+ Request (application/json)

    + Headers

            Authorization: Bearer <api token>

+ Response 200 (application/json)

        {
            "Created": 1651087621,
            "ID": "e42d8197-c0ad-4ccd-8cfa-802519328264",
            "StatusID": "ACTIVE",
            "Expiration": "2023-04-27T19:26:51.000Z",
            "Key": "ee560c18-cd8f-4b62-b28c-9dd2cddf9fda",
            "MaxDevices": null,
            "LicenseType": "KIOSK",
            "LicenseTypeID": "KIOSK",
            "DeviceRegistrations": 20,
            "SDKPlatforms": []
        }


## Auths [/auths]

These endpoints provide user/device authentication.


### Request reset password link to user's email [PATCH /auths/users/reset]

Request to send password reset link to user's email.

+ Request (application/json)

    + Body

            {
                "Email": "user@email.com",
                "Identifier": "organization_identifier"
            }

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 403 (application/json)

        {
            "Code": "USER_PASSWORD_RESET_ERROR",
            "Message": "No such user."
        }

+ Response 403 (application/json)

        {
            "Code": "USER_RESET_ERROR",
            "Message": "Could not reset user password"
        }


### Request login code [PATCH /auths/users/code]

Request to send login code.

+ Request (application/json)

    + Body

            {
                "PhoneNumber": "phone_number",
                "Identifier": "organization_identifier"
            }

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 401 (application/json)

        {
            "Code": "LOGIN_METHOD",
            "Message": "Invalid login method! Try to login with an Email."
        }

+ Response 404 (application/json)

        {
            "Code": "INVALID_USER",
            "Message": "User not found"
        }

### Renew [POST /auths/renew]

Renews user/device token and refresh token. When you register a license or login
with user's credentials, a pair of tokens (a Device or User Token and a One-Time
Refresh Token) is sent back. The client needs to send the matching pair to
exchange it with a new pair. The old pair will not be valid after calling this 
endpoint. Refresh Token is only used when calling
the [`Auths.Renew`](https://dfxapiversion10.docs.apiary.io/#reference/0/auths/renew)
endpoint.

+ Request (application/json)

    + Body

            {
                "Token": "DEVICE_OR_USER_TOKEN",
                "RefreshToken": "REFRESH_TOKEN"
            }

+ Response 200 (application/json)

        {
            "Token": "NEW_DEVICE_OR_USER_TOKEN",
            "RefreshToken": "NEW_REFRESH_TOKEN"
        }


### Request Child Token [POST /auths/generateToken]
Request to get a child token. When you register a license or login
with user's credentials, a pair of tokens (a Device or User Token and a One-Time
Refresh Token) is sent back. The client needs to send the matching pair to
get a new access Token. The old pair will be valid after calling this 
endpoint.

This endpoint is primarily used in the Web Measurement Service(WMS).
In WMS, the Device Token Pair is obtained by your server and immediately 
exchanged with a new pair once it reaches the WMS using this endpoint.


+ Request (application/json)

    + Body

            {
                "Token": "DEVICE_OR_USER_TOKEN",
                "RefreshToken": "REFRESH_TOKEN"
            }

+ Response 200 (application/json)

        {
            "Token": "NEW_DEVICE_OR_USER_TOKEN"
        }